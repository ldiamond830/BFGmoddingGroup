//Weapon Classes

Class IcicleCrossBow : RocketLauncher {

Default{
Obituary "%o was impalled by %k's icile";
    Radius 20;
    Height 12;
    Inventory.PickupMessage "Icicle Crossbow";
    Weapon.SelectionOrder 500;
    Weapon.AmmoType "IcicleAmmo";
    Weapon.AmmoUse 1;
    Weapon.AmmoGive 20;
	Weapon.SlotNumber 6;
Tag "Icicle Crossbow";
}

States
{
//currently using rocket launcher sprites as place hold
Ready:
MISG A 1 A_WeaponReady;
Loop;
Deselect:
MISG A 1 A_Lower;
Loop;
Select:
MISG A 1 A_Raise;
Loop;
Fire:
MISG B 8 A_GunFlash;
MISG B 12{
SpawnPlayerMissile("IcicleProjectile");
A_PlaySound("Crossbow/Fire");
} 

Goto Reset;
Reset:
//holds on rest image for 45 ticks before being ready to fire again
MISG C 45 A_PlaySound("Crossbow/Load");
Goto Ready;
Flash:
MISF A 3 Bright A_Light1;
MISF B 4 Bright;
MISF CD 4 Bright A_Light2;
Goto LightDone;
Spawn:
LAUN A -1;
Stop;
}
}

Class RatGrenade : DoomWeapon{
Default
{
Weapon.SelectionOrder 3000;
Weapon.AmmoUse 1;
Weapon.AmmoGive 2;
Weapon.AmmoType "RocketAmmo";
Weapon.SlotNumber 7;
+WEAPON.NOAUTOFIRE
Inventory.PickupMessage "Player picked up the ultimate weapon";
Tag "Rat Grenadge Weapon";
}
//using BFG sprites as placeholder
States
{
Ready:
BFGG A 1 A_WeaponReady;
Loop;
Deselect:
BFGG A 1 A_Lower;
Loop;
Select:
BFGG A 1 A_Raise;
Loop;
Fire:
BFGG A 20 A_BFGsound;
BFGG B 10 A_GunFlash;
BFGG B 10 A_ThrowGrenade("RatGrenadeProjectile", 0, 0, 8, true);
BFGG B 20 A_ReFire;
Goto Ready;
Flash:
BFGF A 11 Bright A_Light1;
BFGF B 6 Bright A_Light2;
Goto LightDone;
Spawn:
BFUG A -1;
Stop;
OldFire:
BFGG A 10 A_BFGsound;
BFGG BBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBB 1 A_FireOldBFG;
BFGG B 0 A_Light0;
BFGG B 20 A_ReFire;
Goto Ready;
}

}

//Projectile Classes
Class IcicleProjectile : Actor{

Default{
Radius 11;
Height 8;
Speed 25;
Damage 1;
DamageType "Ice";
Projectile;
//allows projectile to pierce but will damage every tick so keep damage value low
+RIPPER

}



States
{
//currently using rocket sprites as place hold
Spawn:
MISL A 1 Bright;
Loop;
Death:
MISL B 8 Bright{
 A_Explode();
 A_PlaySound("Crossbow/Hit");
 }
MISL C 6 Bright;
MISL D 4 Bright;
Stop;
BrainExplode:
MISL BC 10 Bright;
MISL D 10 A_BrainExplode;
Stop;
}

}

//alternate version of the icicle project used by the ice golem, created alt version so that the player and boss version can be balanced separately
Class BossIcicleProjectile : IcicleProjectile{
Default{
Damage 0.01f;
}
}

Class RatGrenadeProjectile : Actor{
Default
{
Radius 13;
Height 8;
Speed 75;
Damage 100;
Projectile;
BounceCount 10;
Gravity 10;
Mass 9;
+RANDOMIZE
+ZDOOMTRANS
+BOUNCEONWALLS
+BOUNCEONFLOORS
+BOUNCEONCEILINGS
-NOGRAVITY

RenderStyle "Add";
Alpha 0.75;
Obituary "$OB_MPBFG_BOOM";
}
States
{
Spawn:
BFS1 AB 4 Bright;
Goto Timer;
Timer:
BFS1 AB 100 Bright;
Goto Death;
Death:
BFE1 AB 8 Bright;
BFE1 C 8 Bright A_BFGSpray;
BFE1 DEF 8 Bright;
Stop;
}
}

Class StenProjectile : Actor{
	Default
	{
	Radius 13;
	Height 8;
	Speed 10;
	Damage 10;
	Scale 1;
	Projectile;
	Obituary "$OB_MPBFG_BOOM";
	}

	States
	{
	//currently using rocket sprites as place hold
	Spawn:
	MISL A 1 Bright;
	Loop;

	Death:
	MISL B 8 Bright A_Explode;
	MISL C 6 Bright;
	MISL D 4 Bright;
	Stop;

	BrainExplode:
	MISL BC 10 Bright;
	MISL D 10 A_BrainExplode;
	Stop;
	}
}

Class StenBomb : StenProjectile{
	Default
	{
	Speed 10;
	-NOGRAVITY
	}
	
	
}

Class StenMassiveProjectile : StenProjectile{
	Default
	{
	Scale 6;
	Speed 0.1;
	}
	States
	{
	//currently using rocket sprites as place holder
	Spawn:
	//waits for 40 ticks before moving
	MISL A 40 Bright;
	Goto Death;
	
	Death:
	MISL A 8 Bright;
	MISL C 6 Bright;
	MISL D 4 Bright;
	Stop;

	BrainExplode:
	MISL BC 10 Bright;
	MISL D 10 A_BrainExplode;
	Stop;
	}
}

Class StenMassiveProjectileMoving : StenMassiveProjectile{
	Default
	{
	Scale 6;
	Speed 12;
	}
	States
	{
	//currently using rocket sprites as place holder
	Spawn:
	MISL A 1 Bright;
	Loop;
	
	Death:
	MISL B 8 Bright;
	MISL C 6 Bright;
	MISL D 4 Bright;
	Stop;

	BrainExplode:
	MISL BC 10 Bright;
	MISL D 10 A_BrainExplode;
	Stop;
	}
}

//===========================================================================
//
// Code (must be attached to StateProvider)
//
//===========================================================================
/*
extend class StateProvider
{
action void A_FireIcicle()
{
if (player == null)
{
return;
}
Weapon weap = player.ReadyWeapon;
if (weap != null && invoker == weap && stateinfo != null && stateinfo.mStateType == STATE_Psprite)
{
if (!weap.DepleteAmmo (weap.bAltFire, true, 1))
return;
}

SpawnPlayerMissile ("IcicleProjectile");
}

}
*/
